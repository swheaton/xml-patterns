===== Singleton / Monostate =====
Either the Builder or Abstract Factory needs to become a Singleton or Monostate.
Document is currently the Abstract Factory for the Builder, which makes it
difficult for it to be a Singleton. I don't want to make Document a Singleton,
and I also don't want to make a separate Abstract Factory, because then the created
elements lose their ownerDocument information.

So I've made Builder be a Singleton by following the implementation given by the
GoF and creating a static instance. The ramifications of this are that the Builder
can only create *one* document across all users of the class. This seems
inappropriate for a general XML library, but perhaps we know that there must be
only one DOM tree, and it is built up by all users.

===== Proxy =====
I decided to adapt my solution from module 4 instead of using the instructor solution,
because it was easier for me to reason about. Below are the key additions:

-XMLParseDirector. Instead of reading the whole thing, now the director just reads
the prolog and the first element.  After that, the ElementProxy will be in charge
of the lazy reading.

-XMLBuilder. The builder was updated to wrap its created elements with ElementProxy.

-XMLTokenizer. I added a getFileOffset() function that uses fstream's tellg() to
get the offset into the file. Also, a constructor that takes in a file name and offset,
and seeks to the offset using seekg(), so reading can resume right at this element's
contents.

-ElementProxy. New class that wraps an Element object as a virtual proxy. It contains
the file name and the offset into that file for the contents of the Element.
Most of the functions pass right through to the contained element, but any functions
that require accessing the childNodes list call loadChildren() first.
loadChildren() creates an XMLTokenizer at the right offset, then begins parsing.
It adds elements while it's still at the same level of the tree, and stops reading
when it reaches the closing tag for the element. It only adds elements at the first
level - further descendants will be read if their parents are loaded, since they
are also ElementProxy's. All of this ensures children are only read as needed, and
the file is scanned O(2*n) times.