==== State ====
The state pattern is implemented for the Director by having a DirectorState class
that has a public parse() function. Every logical state in the Director's parse
process then has its own subclass inheriting from DirectorState. In the parse()
functions, the subclasses have a protected changeState() function that takes in
a Director and changes its state variable. This way, each state has its own
parsing logic that takes in the next token, uses the Builder to do the correct
build action, then advances the state. Each state is a Singleton because the states
can be revisited multiple times and there's no need to keep instantiating them
every time.

==== Visitor ====
The serialization algorithm has been implemented with the Visitor pattern by removing
the serialize() function on the Node classes and replacing it with an accept()
function that takes a reference to a Visitor class. The SerializeVisitor class
implements all of the visit() functions as the serialize() functions used to. Some
implementations of composite and visitor place the composite traversal at the parent
Visitor class level, but this was too difficult because serialization occurs before,
after, and sometimes in between serialization of the children. The XMLSerializer
is the client that creates and passes the SerializeVisitor into the Node for
serialization.